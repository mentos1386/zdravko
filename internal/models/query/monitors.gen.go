// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"code.tjo.space/mentos1386/zdravko/internal/models"
)

func newMonitor(db *gorm.DB, opts ...gen.DOOption) monitor {
	_monitor := monitor{}

	_monitor.monitorDo.UseDB(db, opts...)
	_monitor.monitorDo.UseModel(&models.Monitor{})

	tableName := _monitor.monitorDo.TableName()
	_monitor.ALL = field.NewAsterisk(tableName)
	_monitor.ID = field.NewUint(tableName, "id")
	_monitor.CreatedAt = field.NewTime(tableName, "created_at")
	_monitor.UpdatedAt = field.NewTime(tableName, "updated_at")
	_monitor.DeletedAt = field.NewField(tableName, "deleted_at")
	_monitor.Slug = field.NewString(tableName, "slug")
	_monitor.Name = field.NewString(tableName, "name")
	_monitor.Schedule = field.NewString(tableName, "schedule")
	_monitor.Script = field.NewString(tableName, "script")
	_monitor.History = monitorHasManyHistory{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("History", "models.MonitorHistory"),
	}

	_monitor.WorkerGroups = monitorManyToManyWorkerGroups{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("WorkerGroups", "models.WorkerGroup"),
		Monitors: struct {
			field.RelationField
			History struct {
				field.RelationField
			}
			WorkerGroups struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("WorkerGroups.Monitors", "models.Monitor"),
			History: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("WorkerGroups.Monitors.History", "models.MonitorHistory"),
			},
			WorkerGroups: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("WorkerGroups.Monitors.WorkerGroups", "models.WorkerGroup"),
			},
		},
	}

	_monitor.fillFieldMap()

	return _monitor
}

type monitor struct {
	monitorDo monitorDo

	ALL       field.Asterisk
	ID        field.Uint
	CreatedAt field.Time
	UpdatedAt field.Time
	DeletedAt field.Field
	Slug      field.String
	Name      field.String
	Schedule  field.String
	Script    field.String
	History   monitorHasManyHistory

	WorkerGroups monitorManyToManyWorkerGroups

	fieldMap map[string]field.Expr
}

func (m monitor) Table(newTableName string) *monitor {
	m.monitorDo.UseTable(newTableName)
	return m.updateTableName(newTableName)
}

func (m monitor) As(alias string) *monitor {
	m.monitorDo.DO = *(m.monitorDo.As(alias).(*gen.DO))
	return m.updateTableName(alias)
}

func (m *monitor) updateTableName(table string) *monitor {
	m.ALL = field.NewAsterisk(table)
	m.ID = field.NewUint(table, "id")
	m.CreatedAt = field.NewTime(table, "created_at")
	m.UpdatedAt = field.NewTime(table, "updated_at")
	m.DeletedAt = field.NewField(table, "deleted_at")
	m.Slug = field.NewString(table, "slug")
	m.Name = field.NewString(table, "name")
	m.Schedule = field.NewString(table, "schedule")
	m.Script = field.NewString(table, "script")

	m.fillFieldMap()

	return m
}

func (m *monitor) WithContext(ctx context.Context) IMonitorDo { return m.monitorDo.WithContext(ctx) }

func (m monitor) TableName() string { return m.monitorDo.TableName() }

func (m monitor) Alias() string { return m.monitorDo.Alias() }

func (m monitor) Columns(cols ...field.Expr) gen.Columns { return m.monitorDo.Columns(cols...) }

func (m *monitor) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := m.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (m *monitor) fillFieldMap() {
	m.fieldMap = make(map[string]field.Expr, 10)
	m.fieldMap["id"] = m.ID
	m.fieldMap["created_at"] = m.CreatedAt
	m.fieldMap["updated_at"] = m.UpdatedAt
	m.fieldMap["deleted_at"] = m.DeletedAt
	m.fieldMap["slug"] = m.Slug
	m.fieldMap["name"] = m.Name
	m.fieldMap["schedule"] = m.Schedule
	m.fieldMap["script"] = m.Script

}

func (m monitor) clone(db *gorm.DB) monitor {
	m.monitorDo.ReplaceConnPool(db.Statement.ConnPool)
	return m
}

func (m monitor) replaceDB(db *gorm.DB) monitor {
	m.monitorDo.ReplaceDB(db)
	return m
}

type monitorHasManyHistory struct {
	db *gorm.DB

	field.RelationField
}

func (a monitorHasManyHistory) Where(conds ...field.Expr) *monitorHasManyHistory {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a monitorHasManyHistory) WithContext(ctx context.Context) *monitorHasManyHistory {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a monitorHasManyHistory) Session(session *gorm.Session) *monitorHasManyHistory {
	a.db = a.db.Session(session)
	return &a
}

func (a monitorHasManyHistory) Model(m *models.Monitor) *monitorHasManyHistoryTx {
	return &monitorHasManyHistoryTx{a.db.Model(m).Association(a.Name())}
}

type monitorHasManyHistoryTx struct{ tx *gorm.Association }

func (a monitorHasManyHistoryTx) Find() (result []*models.MonitorHistory, err error) {
	return result, a.tx.Find(&result)
}

func (a monitorHasManyHistoryTx) Append(values ...*models.MonitorHistory) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a monitorHasManyHistoryTx) Replace(values ...*models.MonitorHistory) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a monitorHasManyHistoryTx) Delete(values ...*models.MonitorHistory) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a monitorHasManyHistoryTx) Clear() error {
	return a.tx.Clear()
}

func (a monitorHasManyHistoryTx) Count() int64 {
	return a.tx.Count()
}

type monitorManyToManyWorkerGroups struct {
	db *gorm.DB

	field.RelationField

	Monitors struct {
		field.RelationField
		History struct {
			field.RelationField
		}
		WorkerGroups struct {
			field.RelationField
		}
	}
}

func (a monitorManyToManyWorkerGroups) Where(conds ...field.Expr) *monitorManyToManyWorkerGroups {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a monitorManyToManyWorkerGroups) WithContext(ctx context.Context) *monitorManyToManyWorkerGroups {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a monitorManyToManyWorkerGroups) Session(session *gorm.Session) *monitorManyToManyWorkerGroups {
	a.db = a.db.Session(session)
	return &a
}

func (a monitorManyToManyWorkerGroups) Model(m *models.Monitor) *monitorManyToManyWorkerGroupsTx {
	return &monitorManyToManyWorkerGroupsTx{a.db.Model(m).Association(a.Name())}
}

type monitorManyToManyWorkerGroupsTx struct{ tx *gorm.Association }

func (a monitorManyToManyWorkerGroupsTx) Find() (result []*models.WorkerGroup, err error) {
	return result, a.tx.Find(&result)
}

func (a monitorManyToManyWorkerGroupsTx) Append(values ...*models.WorkerGroup) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a monitorManyToManyWorkerGroupsTx) Replace(values ...*models.WorkerGroup) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a monitorManyToManyWorkerGroupsTx) Delete(values ...*models.WorkerGroup) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a monitorManyToManyWorkerGroupsTx) Clear() error {
	return a.tx.Clear()
}

func (a monitorManyToManyWorkerGroupsTx) Count() int64 {
	return a.tx.Count()
}

type monitorDo struct{ gen.DO }

type IMonitorDo interface {
	gen.SubQuery
	Debug() IMonitorDo
	WithContext(ctx context.Context) IMonitorDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IMonitorDo
	WriteDB() IMonitorDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IMonitorDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IMonitorDo
	Not(conds ...gen.Condition) IMonitorDo
	Or(conds ...gen.Condition) IMonitorDo
	Select(conds ...field.Expr) IMonitorDo
	Where(conds ...gen.Condition) IMonitorDo
	Order(conds ...field.Expr) IMonitorDo
	Distinct(cols ...field.Expr) IMonitorDo
	Omit(cols ...field.Expr) IMonitorDo
	Join(table schema.Tabler, on ...field.Expr) IMonitorDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IMonitorDo
	RightJoin(table schema.Tabler, on ...field.Expr) IMonitorDo
	Group(cols ...field.Expr) IMonitorDo
	Having(conds ...gen.Condition) IMonitorDo
	Limit(limit int) IMonitorDo
	Offset(offset int) IMonitorDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IMonitorDo
	Unscoped() IMonitorDo
	Create(values ...*models.Monitor) error
	CreateInBatches(values []*models.Monitor, batchSize int) error
	Save(values ...*models.Monitor) error
	First() (*models.Monitor, error)
	Take() (*models.Monitor, error)
	Last() (*models.Monitor, error)
	Find() ([]*models.Monitor, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.Monitor, err error)
	FindInBatches(result *[]*models.Monitor, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*models.Monitor) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IMonitorDo
	Assign(attrs ...field.AssignExpr) IMonitorDo
	Joins(fields ...field.RelationField) IMonitorDo
	Preload(fields ...field.RelationField) IMonitorDo
	FirstOrInit() (*models.Monitor, error)
	FirstOrCreate() (*models.Monitor, error)
	FindByPage(offset int, limit int) (result []*models.Monitor, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IMonitorDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (m monitorDo) Debug() IMonitorDo {
	return m.withDO(m.DO.Debug())
}

func (m monitorDo) WithContext(ctx context.Context) IMonitorDo {
	return m.withDO(m.DO.WithContext(ctx))
}

func (m monitorDo) ReadDB() IMonitorDo {
	return m.Clauses(dbresolver.Read)
}

func (m monitorDo) WriteDB() IMonitorDo {
	return m.Clauses(dbresolver.Write)
}

func (m monitorDo) Session(config *gorm.Session) IMonitorDo {
	return m.withDO(m.DO.Session(config))
}

func (m monitorDo) Clauses(conds ...clause.Expression) IMonitorDo {
	return m.withDO(m.DO.Clauses(conds...))
}

func (m monitorDo) Returning(value interface{}, columns ...string) IMonitorDo {
	return m.withDO(m.DO.Returning(value, columns...))
}

func (m monitorDo) Not(conds ...gen.Condition) IMonitorDo {
	return m.withDO(m.DO.Not(conds...))
}

func (m monitorDo) Or(conds ...gen.Condition) IMonitorDo {
	return m.withDO(m.DO.Or(conds...))
}

func (m monitorDo) Select(conds ...field.Expr) IMonitorDo {
	return m.withDO(m.DO.Select(conds...))
}

func (m monitorDo) Where(conds ...gen.Condition) IMonitorDo {
	return m.withDO(m.DO.Where(conds...))
}

func (m monitorDo) Order(conds ...field.Expr) IMonitorDo {
	return m.withDO(m.DO.Order(conds...))
}

func (m monitorDo) Distinct(cols ...field.Expr) IMonitorDo {
	return m.withDO(m.DO.Distinct(cols...))
}

func (m monitorDo) Omit(cols ...field.Expr) IMonitorDo {
	return m.withDO(m.DO.Omit(cols...))
}

func (m monitorDo) Join(table schema.Tabler, on ...field.Expr) IMonitorDo {
	return m.withDO(m.DO.Join(table, on...))
}

func (m monitorDo) LeftJoin(table schema.Tabler, on ...field.Expr) IMonitorDo {
	return m.withDO(m.DO.LeftJoin(table, on...))
}

func (m monitorDo) RightJoin(table schema.Tabler, on ...field.Expr) IMonitorDo {
	return m.withDO(m.DO.RightJoin(table, on...))
}

func (m monitorDo) Group(cols ...field.Expr) IMonitorDo {
	return m.withDO(m.DO.Group(cols...))
}

func (m monitorDo) Having(conds ...gen.Condition) IMonitorDo {
	return m.withDO(m.DO.Having(conds...))
}

func (m monitorDo) Limit(limit int) IMonitorDo {
	return m.withDO(m.DO.Limit(limit))
}

func (m monitorDo) Offset(offset int) IMonitorDo {
	return m.withDO(m.DO.Offset(offset))
}

func (m monitorDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IMonitorDo {
	return m.withDO(m.DO.Scopes(funcs...))
}

func (m monitorDo) Unscoped() IMonitorDo {
	return m.withDO(m.DO.Unscoped())
}

func (m monitorDo) Create(values ...*models.Monitor) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Create(values)
}

func (m monitorDo) CreateInBatches(values []*models.Monitor, batchSize int) error {
	return m.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (m monitorDo) Save(values ...*models.Monitor) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Save(values)
}

func (m monitorDo) First() (*models.Monitor, error) {
	if result, err := m.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.Monitor), nil
	}
}

func (m monitorDo) Take() (*models.Monitor, error) {
	if result, err := m.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.Monitor), nil
	}
}

func (m monitorDo) Last() (*models.Monitor, error) {
	if result, err := m.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.Monitor), nil
	}
}

func (m monitorDo) Find() ([]*models.Monitor, error) {
	result, err := m.DO.Find()
	return result.([]*models.Monitor), err
}

func (m monitorDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.Monitor, err error) {
	buf := make([]*models.Monitor, 0, batchSize)
	err = m.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (m monitorDo) FindInBatches(result *[]*models.Monitor, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return m.DO.FindInBatches(result, batchSize, fc)
}

func (m monitorDo) Attrs(attrs ...field.AssignExpr) IMonitorDo {
	return m.withDO(m.DO.Attrs(attrs...))
}

func (m monitorDo) Assign(attrs ...field.AssignExpr) IMonitorDo {
	return m.withDO(m.DO.Assign(attrs...))
}

func (m monitorDo) Joins(fields ...field.RelationField) IMonitorDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Joins(_f))
	}
	return &m
}

func (m monitorDo) Preload(fields ...field.RelationField) IMonitorDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Preload(_f))
	}
	return &m
}

func (m monitorDo) FirstOrInit() (*models.Monitor, error) {
	if result, err := m.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.Monitor), nil
	}
}

func (m monitorDo) FirstOrCreate() (*models.Monitor, error) {
	if result, err := m.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.Monitor), nil
	}
}

func (m monitorDo) FindByPage(offset int, limit int) (result []*models.Monitor, count int64, err error) {
	result, err = m.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = m.Offset(-1).Limit(-1).Count()
	return
}

func (m monitorDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = m.Count()
	if err != nil {
		return
	}

	err = m.Offset(offset).Limit(limit).Scan(result)
	return
}

func (m monitorDo) Scan(result interface{}) (err error) {
	return m.DO.Scan(result)
}

func (m monitorDo) Delete(models ...*models.Monitor) (result gen.ResultInfo, err error) {
	return m.DO.Delete(models)
}

func (m *monitorDo) withDO(do gen.Dao) *monitorDo {
	m.DO = *do.(*gen.DO)
	return m
}
