// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

var (
	Q              = new(Query)
	Monitor        *monitor
	MonitorHistory *monitorHistory
	OAuth2State    *oAuth2State
	WorkerGroup    *workerGroup
)

func SetDefault(db *gorm.DB, opts ...gen.DOOption) {
	*Q = *Use(db, opts...)
	Monitor = &Q.Monitor
	MonitorHistory = &Q.MonitorHistory
	OAuth2State = &Q.OAuth2State
	WorkerGroup = &Q.WorkerGroup
}

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:             db,
		Monitor:        newMonitor(db, opts...),
		MonitorHistory: newMonitorHistory(db, opts...),
		OAuth2State:    newOAuth2State(db, opts...),
		WorkerGroup:    newWorkerGroup(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	Monitor        monitor
	MonitorHistory monitorHistory
	OAuth2State    oAuth2State
	WorkerGroup    workerGroup
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:             db,
		Monitor:        q.Monitor.clone(db),
		MonitorHistory: q.MonitorHistory.clone(db),
		OAuth2State:    q.OAuth2State.clone(db),
		WorkerGroup:    q.WorkerGroup.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:             db,
		Monitor:        q.Monitor.replaceDB(db),
		MonitorHistory: q.MonitorHistory.replaceDB(db),
		OAuth2State:    q.OAuth2State.replaceDB(db),
		WorkerGroup:    q.WorkerGroup.replaceDB(db),
	}
}

type queryCtx struct {
	Monitor        IMonitorDo
	MonitorHistory IMonitorHistoryDo
	OAuth2State    IOAuth2StateDo
	WorkerGroup    IWorkerGroupDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		Monitor:        q.Monitor.WithContext(ctx),
		MonitorHistory: q.MonitorHistory.WithContext(ctx),
		OAuth2State:    q.OAuth2State.WithContext(ctx),
		WorkerGroup:    q.WorkerGroup.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
