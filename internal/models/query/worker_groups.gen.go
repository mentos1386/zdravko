// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"code.tjo.space/mentos1386/zdravko/internal/models"
)

func newWorkerGroup(db *gorm.DB, opts ...gen.DOOption) workerGroup {
	_workerGroup := workerGroup{}

	_workerGroup.workerGroupDo.UseDB(db, opts...)
	_workerGroup.workerGroupDo.UseModel(&models.WorkerGroup{})

	tableName := _workerGroup.workerGroupDo.TableName()
	_workerGroup.ALL = field.NewAsterisk(tableName)
	_workerGroup.ID = field.NewUint(tableName, "id")
	_workerGroup.CreatedAt = field.NewTime(tableName, "created_at")
	_workerGroup.UpdatedAt = field.NewTime(tableName, "updated_at")
	_workerGroup.DeletedAt = field.NewField(tableName, "deleted_at")
	_workerGroup.Name = field.NewString(tableName, "name")
	_workerGroup.Slug = field.NewString(tableName, "slug")
	_workerGroup.Monitors = workerGroupManyToManyMonitors{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Monitors", "models.Monitor"),
		History: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Monitors.History", "models.MonitorHistory"),
		},
		WorkerGroups: struct {
			field.RelationField
			Monitors struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("Monitors.WorkerGroups", "models.WorkerGroup"),
			Monitors: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Monitors.WorkerGroups.Monitors", "models.Monitor"),
			},
		},
	}

	_workerGroup.fillFieldMap()

	return _workerGroup
}

type workerGroup struct {
	workerGroupDo workerGroupDo

	ALL       field.Asterisk
	ID        field.Uint
	CreatedAt field.Time
	UpdatedAt field.Time
	DeletedAt field.Field
	Name      field.String
	Slug      field.String
	Monitors  workerGroupManyToManyMonitors

	fieldMap map[string]field.Expr
}

func (w workerGroup) Table(newTableName string) *workerGroup {
	w.workerGroupDo.UseTable(newTableName)
	return w.updateTableName(newTableName)
}

func (w workerGroup) As(alias string) *workerGroup {
	w.workerGroupDo.DO = *(w.workerGroupDo.As(alias).(*gen.DO))
	return w.updateTableName(alias)
}

func (w *workerGroup) updateTableName(table string) *workerGroup {
	w.ALL = field.NewAsterisk(table)
	w.ID = field.NewUint(table, "id")
	w.CreatedAt = field.NewTime(table, "created_at")
	w.UpdatedAt = field.NewTime(table, "updated_at")
	w.DeletedAt = field.NewField(table, "deleted_at")
	w.Name = field.NewString(table, "name")
	w.Slug = field.NewString(table, "slug")

	w.fillFieldMap()

	return w
}

func (w *workerGroup) WithContext(ctx context.Context) IWorkerGroupDo {
	return w.workerGroupDo.WithContext(ctx)
}

func (w workerGroup) TableName() string { return w.workerGroupDo.TableName() }

func (w workerGroup) Alias() string { return w.workerGroupDo.Alias() }

func (w workerGroup) Columns(cols ...field.Expr) gen.Columns { return w.workerGroupDo.Columns(cols...) }

func (w *workerGroup) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := w.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (w *workerGroup) fillFieldMap() {
	w.fieldMap = make(map[string]field.Expr, 7)
	w.fieldMap["id"] = w.ID
	w.fieldMap["created_at"] = w.CreatedAt
	w.fieldMap["updated_at"] = w.UpdatedAt
	w.fieldMap["deleted_at"] = w.DeletedAt
	w.fieldMap["name"] = w.Name
	w.fieldMap["slug"] = w.Slug

}

func (w workerGroup) clone(db *gorm.DB) workerGroup {
	w.workerGroupDo.ReplaceConnPool(db.Statement.ConnPool)
	return w
}

func (w workerGroup) replaceDB(db *gorm.DB) workerGroup {
	w.workerGroupDo.ReplaceDB(db)
	return w
}

type workerGroupManyToManyMonitors struct {
	db *gorm.DB

	field.RelationField

	History struct {
		field.RelationField
	}
	WorkerGroups struct {
		field.RelationField
		Monitors struct {
			field.RelationField
		}
	}
}

func (a workerGroupManyToManyMonitors) Where(conds ...field.Expr) *workerGroupManyToManyMonitors {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a workerGroupManyToManyMonitors) WithContext(ctx context.Context) *workerGroupManyToManyMonitors {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a workerGroupManyToManyMonitors) Session(session *gorm.Session) *workerGroupManyToManyMonitors {
	a.db = a.db.Session(session)
	return &a
}

func (a workerGroupManyToManyMonitors) Model(m *models.WorkerGroup) *workerGroupManyToManyMonitorsTx {
	return &workerGroupManyToManyMonitorsTx{a.db.Model(m).Association(a.Name())}
}

type workerGroupManyToManyMonitorsTx struct{ tx *gorm.Association }

func (a workerGroupManyToManyMonitorsTx) Find() (result []*models.Monitor, err error) {
	return result, a.tx.Find(&result)
}

func (a workerGroupManyToManyMonitorsTx) Append(values ...*models.Monitor) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a workerGroupManyToManyMonitorsTx) Replace(values ...*models.Monitor) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a workerGroupManyToManyMonitorsTx) Delete(values ...*models.Monitor) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a workerGroupManyToManyMonitorsTx) Clear() error {
	return a.tx.Clear()
}

func (a workerGroupManyToManyMonitorsTx) Count() int64 {
	return a.tx.Count()
}

type workerGroupDo struct{ gen.DO }

type IWorkerGroupDo interface {
	gen.SubQuery
	Debug() IWorkerGroupDo
	WithContext(ctx context.Context) IWorkerGroupDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IWorkerGroupDo
	WriteDB() IWorkerGroupDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IWorkerGroupDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IWorkerGroupDo
	Not(conds ...gen.Condition) IWorkerGroupDo
	Or(conds ...gen.Condition) IWorkerGroupDo
	Select(conds ...field.Expr) IWorkerGroupDo
	Where(conds ...gen.Condition) IWorkerGroupDo
	Order(conds ...field.Expr) IWorkerGroupDo
	Distinct(cols ...field.Expr) IWorkerGroupDo
	Omit(cols ...field.Expr) IWorkerGroupDo
	Join(table schema.Tabler, on ...field.Expr) IWorkerGroupDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IWorkerGroupDo
	RightJoin(table schema.Tabler, on ...field.Expr) IWorkerGroupDo
	Group(cols ...field.Expr) IWorkerGroupDo
	Having(conds ...gen.Condition) IWorkerGroupDo
	Limit(limit int) IWorkerGroupDo
	Offset(offset int) IWorkerGroupDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IWorkerGroupDo
	Unscoped() IWorkerGroupDo
	Create(values ...*models.WorkerGroup) error
	CreateInBatches(values []*models.WorkerGroup, batchSize int) error
	Save(values ...*models.WorkerGroup) error
	First() (*models.WorkerGroup, error)
	Take() (*models.WorkerGroup, error)
	Last() (*models.WorkerGroup, error)
	Find() ([]*models.WorkerGroup, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.WorkerGroup, err error)
	FindInBatches(result *[]*models.WorkerGroup, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*models.WorkerGroup) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IWorkerGroupDo
	Assign(attrs ...field.AssignExpr) IWorkerGroupDo
	Joins(fields ...field.RelationField) IWorkerGroupDo
	Preload(fields ...field.RelationField) IWorkerGroupDo
	FirstOrInit() (*models.WorkerGroup, error)
	FirstOrCreate() (*models.WorkerGroup, error)
	FindByPage(offset int, limit int) (result []*models.WorkerGroup, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IWorkerGroupDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (w workerGroupDo) Debug() IWorkerGroupDo {
	return w.withDO(w.DO.Debug())
}

func (w workerGroupDo) WithContext(ctx context.Context) IWorkerGroupDo {
	return w.withDO(w.DO.WithContext(ctx))
}

func (w workerGroupDo) ReadDB() IWorkerGroupDo {
	return w.Clauses(dbresolver.Read)
}

func (w workerGroupDo) WriteDB() IWorkerGroupDo {
	return w.Clauses(dbresolver.Write)
}

func (w workerGroupDo) Session(config *gorm.Session) IWorkerGroupDo {
	return w.withDO(w.DO.Session(config))
}

func (w workerGroupDo) Clauses(conds ...clause.Expression) IWorkerGroupDo {
	return w.withDO(w.DO.Clauses(conds...))
}

func (w workerGroupDo) Returning(value interface{}, columns ...string) IWorkerGroupDo {
	return w.withDO(w.DO.Returning(value, columns...))
}

func (w workerGroupDo) Not(conds ...gen.Condition) IWorkerGroupDo {
	return w.withDO(w.DO.Not(conds...))
}

func (w workerGroupDo) Or(conds ...gen.Condition) IWorkerGroupDo {
	return w.withDO(w.DO.Or(conds...))
}

func (w workerGroupDo) Select(conds ...field.Expr) IWorkerGroupDo {
	return w.withDO(w.DO.Select(conds...))
}

func (w workerGroupDo) Where(conds ...gen.Condition) IWorkerGroupDo {
	return w.withDO(w.DO.Where(conds...))
}

func (w workerGroupDo) Order(conds ...field.Expr) IWorkerGroupDo {
	return w.withDO(w.DO.Order(conds...))
}

func (w workerGroupDo) Distinct(cols ...field.Expr) IWorkerGroupDo {
	return w.withDO(w.DO.Distinct(cols...))
}

func (w workerGroupDo) Omit(cols ...field.Expr) IWorkerGroupDo {
	return w.withDO(w.DO.Omit(cols...))
}

func (w workerGroupDo) Join(table schema.Tabler, on ...field.Expr) IWorkerGroupDo {
	return w.withDO(w.DO.Join(table, on...))
}

func (w workerGroupDo) LeftJoin(table schema.Tabler, on ...field.Expr) IWorkerGroupDo {
	return w.withDO(w.DO.LeftJoin(table, on...))
}

func (w workerGroupDo) RightJoin(table schema.Tabler, on ...field.Expr) IWorkerGroupDo {
	return w.withDO(w.DO.RightJoin(table, on...))
}

func (w workerGroupDo) Group(cols ...field.Expr) IWorkerGroupDo {
	return w.withDO(w.DO.Group(cols...))
}

func (w workerGroupDo) Having(conds ...gen.Condition) IWorkerGroupDo {
	return w.withDO(w.DO.Having(conds...))
}

func (w workerGroupDo) Limit(limit int) IWorkerGroupDo {
	return w.withDO(w.DO.Limit(limit))
}

func (w workerGroupDo) Offset(offset int) IWorkerGroupDo {
	return w.withDO(w.DO.Offset(offset))
}

func (w workerGroupDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IWorkerGroupDo {
	return w.withDO(w.DO.Scopes(funcs...))
}

func (w workerGroupDo) Unscoped() IWorkerGroupDo {
	return w.withDO(w.DO.Unscoped())
}

func (w workerGroupDo) Create(values ...*models.WorkerGroup) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Create(values)
}

func (w workerGroupDo) CreateInBatches(values []*models.WorkerGroup, batchSize int) error {
	return w.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (w workerGroupDo) Save(values ...*models.WorkerGroup) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Save(values)
}

func (w workerGroupDo) First() (*models.WorkerGroup, error) {
	if result, err := w.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.WorkerGroup), nil
	}
}

func (w workerGroupDo) Take() (*models.WorkerGroup, error) {
	if result, err := w.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.WorkerGroup), nil
	}
}

func (w workerGroupDo) Last() (*models.WorkerGroup, error) {
	if result, err := w.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.WorkerGroup), nil
	}
}

func (w workerGroupDo) Find() ([]*models.WorkerGroup, error) {
	result, err := w.DO.Find()
	return result.([]*models.WorkerGroup), err
}

func (w workerGroupDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.WorkerGroup, err error) {
	buf := make([]*models.WorkerGroup, 0, batchSize)
	err = w.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (w workerGroupDo) FindInBatches(result *[]*models.WorkerGroup, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return w.DO.FindInBatches(result, batchSize, fc)
}

func (w workerGroupDo) Attrs(attrs ...field.AssignExpr) IWorkerGroupDo {
	return w.withDO(w.DO.Attrs(attrs...))
}

func (w workerGroupDo) Assign(attrs ...field.AssignExpr) IWorkerGroupDo {
	return w.withDO(w.DO.Assign(attrs...))
}

func (w workerGroupDo) Joins(fields ...field.RelationField) IWorkerGroupDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Joins(_f))
	}
	return &w
}

func (w workerGroupDo) Preload(fields ...field.RelationField) IWorkerGroupDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Preload(_f))
	}
	return &w
}

func (w workerGroupDo) FirstOrInit() (*models.WorkerGroup, error) {
	if result, err := w.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.WorkerGroup), nil
	}
}

func (w workerGroupDo) FirstOrCreate() (*models.WorkerGroup, error) {
	if result, err := w.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.WorkerGroup), nil
	}
}

func (w workerGroupDo) FindByPage(offset int, limit int) (result []*models.WorkerGroup, count int64, err error) {
	result, err = w.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = w.Offset(-1).Limit(-1).Count()
	return
}

func (w workerGroupDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = w.Count()
	if err != nil {
		return
	}

	err = w.Offset(offset).Limit(limit).Scan(result)
	return
}

func (w workerGroupDo) Scan(result interface{}) (err error) {
	return w.DO.Scan(result)
}

func (w workerGroupDo) Delete(models ...*models.WorkerGroup) (result gen.ResultInfo, err error) {
	return w.DO.Delete(models)
}

func (w *workerGroupDo) withDO(do gen.Dao) *workerGroupDo {
	w.DO = *do.(*gen.DO)
	return w
}
